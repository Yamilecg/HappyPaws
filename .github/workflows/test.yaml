name: Run Unit Tests and Report Coverage

on:
  pull_request:
    branches:
      - main
      - development

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install

      - name: Run tests with coverage threshold
        run: |
          npx jest --coverage --coverageThreshold='{
            "global": {
              "branches": 80,
              "functions": 80,
              "lines": 80,
              "statements": 80
            }
          }' --coverageReporters="text-summary" > coverage.txt

      - name: Extract coverage summary
        id: coverage
        run: |
          echo 'coverage<<EOF' >> $GITHUB_OUTPUT
          tail -n 20 coverage.txt >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT

      - name: Comment coverage on PR
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `## ðŸ§ª Code Coverage Summary\n\`\`\`\n${{ steps.coverage.outputs.coverage }}\n\`\`\``;

            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const existing = comments.find(comment =>
              comment.body.includes('ðŸ§ª Code Coverage Summary'));

            if (existing) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existing.id,
                body: output,
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: output,
              });
            }
